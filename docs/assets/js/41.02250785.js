(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{179:function(t,e,r){"use strict";r.r(e);var i=r(0),s=Object(i.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("ul",[r("li",[t._v("变量提升配合作用域链")]),t._v(" "),r("li",[t._v("原型链")]),t._v(" "),r("li",[t._v("继承")]),t._v(" "),t._m(4),t._v(" "),r("li",[t._v("new与面向对象")]),t._v(" "),r("li",[t._v("event loop")]),t._v(" "),r("li",[t._v("event delegation/proxy")]),t._v(" "),r("li",[t._v("节流与防动 "),r("a",{attrs:{href:"https://www.jianshu.com/p/c8b86b09daf0?tdsourcetag=s_pcqq_aiomsg",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),r("OutboundLink")],1),t._v(" "),t._m(5)]),t._v(" "),t._m(6),t._v(" "),r("li",[t._v("SPA路由原理")]),t._v(" "),r("li",[t._v("本地存储localStorage、sessionStorage与cookie之间的区别")])]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.imooc.com/article/78956",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),r("OutboundLink")],1)]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),r("ul",[r("li",[t._v("解决跨域方法 "),r("a",{attrs:{href:"https://blog.csdn.net/qq_38128179/article/details/84956552",target:"_blank",rel:"noopener noreferrer"}},[t._v("详情"),r("OutboundLink")],1)])]),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),r("ul",[t._m(59),t._v(" "),r("li",[t._v("与强制缓存相关：catch-control、expires")]),t._v(" "),r("li",[t._v("与协商缓存相关：Last-Modified/if-Modified-Since、Etag/if-None-Match.")]),t._v(" "),t._m(60),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/lncci/article/details/82182788",target:"_blank",rel:"noopener noreferrer"}},[t._v("详情"),r("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"面试必备知识点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试必备知识点","aria-hidden":"true"}},[this._v("#")]),this._v(" 面试必备知识点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css","aria-hidden":"true"}},[this._v("#")]),this._v(" CSS")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("盒模型")]),t._v(" "),r("li",[t._v("CSS的单位和应用场景及Rem的设置")]),t._v(" "),r("li",[t._v("定位，回流与重绘")]),t._v(" "),r("li",[t._v("IFC、BFC与清除浮动")]),t._v(" "),r("li",[t._v("兼容处理")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"原生js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原生js","aria-hidden":"true"}},[this._v("#")]),this._v(" 原生JS")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("li",[t._v("闭包\n"),r("ul",[r("li",[r("p",[t._v("变量的作用域 分两种全局变量和局部变量\njs语言的特别之处是函数内可以直接读取全局变量 但是在函数外部无法访问函数内部的局部变量 注意：在函数内部一定要用var")])]),t._v(" "),r("li",[r("p",[t._v("闭包的概念:就是能够读取其他函数内部变量的函数 本质上闭包是将函数内部和函数外部连起来的桥梁")])]),t._v(" "),r("li",[r("p",[t._v("闭包的用途：一个是可以读取函数内部的变量，2就是让这些变量的值始终保存在内存中不会在函数调用后被自动清除")])]),t._v(" "),r("li",[r("p",[t._v("闭包的注意点:由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。")])]),t._v(" "),r("li",[r("p",[t._v("闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。")])])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("p",[t._v("抖动：把在指定时间内可能会多次执行的方法打包成一次")])]),t._v(" "),r("li",[r("p",[t._v("节流：节流函数允许一个函数在规定的时间内只执行一次")])]),t._v(" "),r("li",[r("p",[t._v("区别：节流函数不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数")])]),t._v(" "),r("li",[r("p",[t._v("防抖动debounce：将几次操作合并为一此操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。")])]),t._v(" "),r("li",[r("p",[t._v("节流throttle ：使得一定时间内只触发一次函数。")])]),t._v(" "),r("li",[r("p",[t._v("它和防抖动最大的区别就是，节流函数不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而防抖动只是在最后一次事件后才触发一次函数。")])]),t._v(" "),r("li",[r("p",[t._v("原理是通过判断是否到达一定时间来触发函数，若没到规定时间则使用计时器延后，而下一次事件则会重新设定计时器")])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("li",[t._v("Promise\n"),r("ul",[r("li",[t._v("Promise 的在三种状态 ：pending 进行中 fulfilled 已成功 rejected 已失败")]),t._v(" "),r("li",[t._v("then() 在Promise中是通过then()方法来指定处理异步操作结果的方法")]),t._v(" "),r("li",[t._v("catch() 是promise实例的方法 它其实是.then(null,rejection)的简写 用于指定 发生错误时的回调 catch()返回一个Promise对象")]),t._v(" "),r("li",[t._v("promise对象的Error对象具有冒泡性质，会一直向后传递，直到被捕获为止,即 错误 总是会被下一个catch语句捕获")]),t._v(" "),r("li",[t._v("all() 用于将多个Promise实例 包装成一个新的promise实例 全部成功才成功 否则失败")]),t._v(" "),r("li",[t._v("race() 其中任意一个实例率先改变，它的状态就跟着改变，而且状态有率先改变的实 例决定")]),t._v(" "),r("li",[t._v("Promise.resolve()可以将现有的对象装换为promise对象")]),t._v(" "),r("li",[t._v("Promise.reject() 返回一个新的promise实例 它的状态为rejected")]),t._v(" "),r("li",[t._v("finally() 用于指定不管promise对象最后的状态如何都会执行")]),t._v(" "),r("li",[t._v("done() 处理回调链的尾端，保证抛出任何可能出现的错误")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("深入Vue的响应原理?")]),t._v(" "),r("li",[t._v("Vue多版本之间的区别（运行时依赖，运行时编译）?")]),t._v(" "),r("li",[t._v("Vue中computed、watch与methods的区别")]),t._v(" "),r("li",[t._v("多种指令与自定义指令")]),t._v(" "),r("li",[t._v("路由传参与导航守卫")]),t._v(" "),r("li",[t._v("Element UI && so on")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react","aria-hidden":"true"}},[this._v("#")]),this._v(" React")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("什么是MVVM？React与Vue的区别与联系？")]),t._v(" "),r("li",[t._v("JSX语法、Virtual DOM与DOM Diff算法？")]),t._v(" "),r("li",[t._v("详细介绍生命周期(三个阶段，生命周期的触发顺序)？")]),t._v(" "),r("li",[t._v("合成事件与改变this指向的三种方式及之间的区别？")]),t._v(" "),r("li",[t._v("样式绑定与CSS Modules")]),t._v(" "),r("li",[t._v("多种组件创建方式及其区别？什么是受控组件？")]),t._v(" "),r("li",[t._v("高阶组件与装饰器")]),t._v(" "),r("li",[t._v("组件通信的多种方式及其之间的区别")]),t._v(" "),r("li",[t._v("React Router及其简单实现")]),t._v(" "),r("li",[t._v("Redux数据流向及三个中间件（redux-logger、redux-thunk、redux-saga）")]),t._v(" "),r("li",[t._v("Ant Design && so on")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"快排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快排","aria-hidden":"true"}},[this._v("#")]),this._v(" 快排")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("通过两个for循环，每一次对比相邻两个数据的大小，小的排在前面，如果前一个比后一个大就交换位置")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/study/img/QuickSort1.png",alt:"快排1"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("1）先判断数组的长度，如果小于等于1，直接return返回，2）去取数组中间的值， 然后遍历数组，把比中间的小的放在一个数组里，比中间值大的放在另一个数组中最后合并数组")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/study/img/QuickSort2.png",alt:"快排2"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"浏览器渲染流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染流程","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器渲染流程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/study/img/windowRender.png",alt:"浏览器渲染流程"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"预渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预渲染","aria-hidden":"true"}},[this._v("#")]),this._v(" 预渲染")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("在webpack中配置\nconst PrerenderSPAPlugin = require('prerender-spa-plugin')")]),t._v(" "),r("li",[t._v("如何通过预渲染的方式降低空白屏的时间\n"),r("ul",[r("li",[t._v("尽可能的缩小webpack或者其他打包工具生成的包的大小")]),t._v(" "),r("li",[t._v("使用服务端渲染的方式")]),t._v(" "),r("li",[t._v("使用预渲染的方式")]),t._v(" "),r("li",[t._v("使用gzip减小网络传输的流量大小")]),t._v(" "),r("li",[t._v("按照页面或者组件分块懒加载")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"es6-模块化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块化","aria-hidden":"true"}},[this._v("#")]),this._v(" ES6 模块化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Es6的模块化分为导出(export) 与(import)两个模块")]),this._v(" "),e("li",[this._v("AMD即Asynchronous Module Definition,实现提前加载  requirejs")]),this._v(" "),e("li",[this._v("AMD采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行")]),this._v(" "),e("li",[this._v("CMD即 common moudle definition实现按需加载  commonjs     通用模块定义")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"cmd与amd的不同的在于："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd与amd的不同的在于：","aria-hidden":"true"}},[this._v("#")]),this._v(" CMD与AMD的不同的在于：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("AMD推崇依赖前置；CMD推崇依赖就近，只有在用到某个模块的时候再去require：")]),this._v(" "),e("li",[this._v("AMD用户体验好，提前加载，CMD性能好 用户需要时才加载")]),this._v(" "),e("li",[this._v("import 做两件事 加载js 挂载js")]),this._v(" "),e("li",[this._v("import 返回的promise对象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"模块化开发的优点："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块化开发的优点：","aria-hidden":"true"}},[this._v("#")]),this._v(" 模块化开发的优点：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("代码复用，让我们更方便地进行代码管理、同时也便于后面代码的修改和维护。")]),this._v(" "),e("li",[this._v("一个单独的文件就是一个模块，是一个单独的作用域，只向外暴露特定的变量和函数。这样可以避免污染全局变量，减少变量命名冲突。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"js模块化规范有：commonjs、amd、cmd、es6的模块系统。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js模块化规范有：commonjs、amd、cmd、es6的模块系统。","aria-hidden":"true"}},[this._v("#")]),this._v(" js模块化规范有：CommonJS、AMD、CMD、ES6的模块系统。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"export的用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#export的用法","aria-hidden":"true"}},[this._v("#")]),this._v(" export的用法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在ES6中每一个模块即是一个文件，在文件中定义的变量，函数，对象在外部是无法获取的。如果你希望外部可以读取模块当中的内容，就必须使用export来对其进行暴露（输出） 如果你不想暴露模块当中的变量名字,可以通过as来进行操作\n"),e("img",{attrs:{src:"/study/img/export1.png",alt:"图片"}}),this._v(" "),e("img",{attrs:{src:"/study/img/export2.png",alt:"图片"}}),this._v(" "),e("img",{attrs:{src:"/study/img/export3.png",alt:"图片"}})])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"默认导出：一个模块只能哟一个默认导出，对于默认导出，导入的名称可以和导出的名称不一致"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认导出：一个模块只能哟一个默认导出，对于默认导出，导入的名称可以和导出的名称不一致","aria-hidden":"true"}},[this._v("#")]),this._v(" 默认导出：一个模块只能哟一个默认导出，对于默认导出，导入的名称可以和导出的名称不一致")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/study/img/export4.png",alt:"图片"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"混合导出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合导出","aria-hidden":"true"}},[this._v("#")]),this._v(" 混合导出")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/study/img/export5.png",alt:"图片"}}),this._v(" "),e("img",{attrs:{src:"/study/img/export6.png",alt:"图片"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"object-definedproperty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-definedproperty","aria-hidden":"true"}},[this._v("#")]),this._v(" Object.definedProperty()")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("语法： Object.definedProperty(obj,prop,descriptor)")]),t._v(" "),r("li",[t._v("参数: obj:被定义或修改属性的对象")]),t._v(" "),r("li",[t._v("prop:要定义或修改的属性名")]),t._v(" "),r("li",[t._v("descriptor:对属性的描述")]),t._v(" "),r("li",[t._v("configurable 可配置 可删除 默认为false")]),t._v(" "),r("li",[t._v("enumerable 可枚举(遍历) 默认为false")]),t._v(" "),r("li",[t._v("writable 可写(赋值操作) 默认为false")]),t._v(" "),r("li",[t._v("value 设置属性值")]),t._v(" "),r("li",[t._v("get() 当获取值时触发的函数")]),t._v(" "),r("li",[t._v("set() 设置值是触发的函数 设置的值通过value值拿到")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"async-await"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-await","aria-hidden":"true"}},[this._v("#")]),this._v(" async/await")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("async 作为关键字放到函数前面 表示是一个异步函数 它返回一个promise对象")]),this._v(" "),e("li",[this._v("await 等待的意思 它后面可以跟任何表达式，但我们更多放一个返回promise对象的表达式 注意await只能放到async函数里")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"proxy是一个构造函数-使用new-proxy创建代理器-第一个参数为一个对象-第二个参数也是一个对象-返回被包裹后的代理器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy是一个构造函数-使用new-proxy创建代理器-第一个参数为一个对象-第二个参数也是一个对象-返回被包裹后的代理器","aria-hidden":"true"}},[this._v("#")]),this._v(" Proxy是一个构造函数 使用new Proxy创建代理器 第一个参数为一个对象 第二个参数也是一个对象 返回被包裹后的代理器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("get(target,props)获取值触发的函数")]),this._v(" "),e("li",[this._v("set(target,props,value)设置值触发的函数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"堆内存：引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆内存：引用类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 堆内存：引用类型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"栈内存：基本类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈内存：基本类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 栈内存：基本类型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"单页面应用-spa"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单页面应用-spa","aria-hidden":"true"}},[this._v("#")]),this._v(" 单页面应用(SPA)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("只有一张Web页面的应用，是一种从Web服务器加载的富客户端，单页面跳转仅刷新局部资源 ，公共资源(js、css等)仅需加载一次，常用于PC端官网、购物等网站")]),this._v(" "),e("li",[e("img",{attrs:{src:"/study/img/spa.png",alt:"单页面应用"}})])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"多页面应用-mpa"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多页面应用-mpa","aria-hidden":"true"}},[this._v("#")]),this._v(" 多页面应用(MPA)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("多页面跳转刷新所有资源，每个公共资源(js、css等)需选择性重新加载，常用于 app 或 客户端等")]),this._v(" "),e("li",[e("img",{attrs:{src:"/study/img/mpa.png",alt:"多页面应用"}})])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区别","aria-hidden":"true"}},[this._v("#")]),this._v(" 区别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("img",{attrs:{src:"/study/img/spampa.png",alt:"区别"}})])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"vue生命周期图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue生命周期图","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue生命周期图")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("img",{attrs:{src:"/study/img/vue.png",alt:"vue"}})])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"react生命周期图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react生命周期图","aria-hidden":"true"}},[this._v("#")]),this._v(" React生命周期图")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[e("img",{attrs:{src:"/study/img/react1.png",alt:"react"}})])]),this._v(" "),e("li",[e("p",[e("img",{attrs:{src:"/study/img/react2.png",alt:"react"}})])]),this._v(" "),e("li",[e("p",[e("img",{attrs:{src:"/study/img/react3.png",alt:"react"}})])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域","aria-hidden":"true"}},[this._v("#")]),this._v(" 跨域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"同源策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同源策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 同源策略")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("- 相同协议 \n- 相同域名\n- 相同端口\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反向代理","aria-hidden":"true"}},[this._v("#")]),this._v(" 反向代理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("proxy")]),this._v(" "),e("li",[this._v("proxies")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp","aria-hidden":"true"}},[this._v("#")]),this._v(" JSONP")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("jsonp是前端解决跨域最实用的方法")]),this._v(" "),e("li",[this._v("原理就是html中 的link,href,src属性都是不受跨域影响的，link可以调用远程的css文件，href可以链接到随便的url上，图片的src可以随意引用图片，script的src属性可以随意引入不同源的js文件")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"http强缓存-本地缓存-和协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http强缓存-本地缓存-和协商缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" http强缓存(本地缓存)和协商缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("img",{attrs:{src:"/study/img/http1.png",alt:"区别"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("img",{attrs:{src:"/study/img/http2.png",alt:"区别"}})])}],!1,null,null,null);e.default=s.exports}}]);